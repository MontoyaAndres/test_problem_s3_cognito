service: ecommerce-gateway
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  lambdaHashingVersion: 20201221
  profile: HERE_YOUR_PROFILE
  region: us-east-2
  stage: develop
  environment:
    STAGE: develop 

custom:
  appSync:
    - ${file(serverless.appsync-api.yml)}

package:
  patterns:
    - '!package-lock.json'
    - '!package.json'

functions:
  test:
    handler: test.handler
    environment:
      BUCKET: !Ref AssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action: s3:GetObject
        Resource: !GetAtt AssetsBucket.Arn

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      UpdateReplacePolicy: Retain
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false
            Mutable: true

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ecommerce_auth_backend_web
        RefreshTokenValidity: 30
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: !Ref WebUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName

    CognitoTestAuthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": authenticated

    CognitoTestUnAuthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": unauthenticated

    IdentityPoolRoleMapping:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt CognitoTestAuthorizedRole.Arn
          unauthenticated: !GetAtt CognitoTestUnAuthorizedRole.Arn

    AssetsBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              ExposedHeaders:
                - 'x-amz-server-side-encryption'
                - 'x-amz-request-id'
                - 'x-amz-id-2'
                - 'ETag'
              MaxAge: 3000
